---
description: 实现错题mistake的懒加载并保证所有功能ok
globs: 
---
# 错题列表懒加载实现步骤清单

## 后端改造 (metadata.ts) [✅]
- [✅ ] 1. 实现 getBasicMetadataList() 方法
  - 返回不含预览图的基础信息
  - 包含文件ID、文件名、上传日期等

- [✅ ] 2. 实现 getPreview(fileId) 方法
  - 按需返回单个文件的预览图
  - 返回 base64 格式的图片数据

## IPC 通信层改造 [❌]
- [ ] 1. main/index.ts 添加新的IPC处理器
  - [ ] handle 'get-basic-mistakes'
  - [ ] handle 'get-mistake-preview'

- [ ] 2. preload/index.ts 添加新的API暴露
  - [ ] getBasicMistakesList()
  - [ ] getMistakePreview()

## 前端改造 (Mistake.vue/History.vue) [❌]
- [ ] 1. 数据结构调整
  - [ ] 定义基础列表接口
  - [ ] 定义预览图接口

- [ ] 2. 列表渲染优化
  - [ ] 实现基础数据的快速渲染
  - [ ] 添加预览图占位符

- [ ] 3. 懒加载实现
  - [ ] 添加 IntersectionObserver
  - [ ] 实现预览图加载逻辑
  - [ ] 添加加载状态指示

## 性能优化 [❌]
- [ ] 1. 防抖/节流处理
  - [ ] 预览图请求控制
  - [ ] 滚动事件优化

- [ ] 2. 缓存机制
  - [ ] 预览图本地缓存
  - [ ] 预加载策略

## 错误处理 [❌]
- [ ] 1. 添加错误处理
  - [ ] 加载失败提示
  - [ ] 重试机制
  - [ ] 超时处理

## 测试验证 [❌]
- [ ] 1. 功能测试
  - [ ] 基础列表加载
  - [ ] 预览图懒加载
  - [ ] 滚动性能

- [ ] 2. 性能测试
  - [ ] 首次加载时间
  - [ ] 内存占用
  - [ ] 滚动流畅度
  
  
  当前架构:前端(Mistake.vue/History.vue) 
  -> IPC调用(preload/index.ts) 
    -> 后端处理(main/index.ts) 
      -> 数据管理(main/metadata.ts)// 获取错题列表时
1. 前端调用 getMistakes()
2. 后端读取所有文件信息
3. 将所有图片转为 base64
4. 一次性返回完整数据
# 错题列表懒加载实现规则

## 1. 数据分层
- **基础数据层**：不包含图片预览的元数据信息
  - 文件ID、文件名、上传日期、标签等文本信息
  - 训练记录、熟练度等状态信息
  
- **预览图层**：单独请求的图片数据
  - 文件ID对应的图片base64数据
  - 按需加载，避免一次性传输大量图片

## 2. 加载流程
1. **初始化加载**
   - 前端调用 `getBasicMistakesList()`
   - 后端仅返回基础元数据信息
   - 前端快速渲染列表结构

2. **预览图懒加载**
   - 前端检测到元素进入可视区域
   - 调用 `getMistakePreview(fileId)`
   - 后端返回单个文件的预览图
   - 前端更新对应列表项的预览图


## 4. 性能优化
- 使用 IntersectionObserver 监测元素可视性
- 设置预览图加载的防抖/节流
- 实现预览图缓存机制
- 支持预加载下一屏内容



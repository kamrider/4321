---
description: 功能完善
globs: 
alwaysApply: false
---
# Your rule content

- You can @ files here
- You can use markdown but dont have to

待优化项目

~~1. 导出功能逻辑分离~~ (已完成)

2. 缓存优化
问题：
- 用户切换后缓存未更新
- history、mistakes、exported mistakes 页面数据未随用户切换而更新
优化方向：
- 实现基于用户ID的缓存隔离
- 监听用户切换事件，触发缓存更新
- 优化数据加载性能
- 考虑使用 localStorage 或 IndexedDB
- 确保用户数据安全隔离

3. 舒尔特方格与注意力模式持久化
改进点：
- 将用户偏好设置持久化存储
- 保存舒尔特方格大小设置
- 保存时间限制设置

4. History页面训练按钮防抖
- 添加提交状态锁
- 使用 isSubmitting 变量控制提交状态
- 防止重复提交
- 添加适当的延时
- 优化用户体验
- 在提交过程中禁用按钮
- 添加加载状态提示
- 提供视觉反馈

5. History页面筛选功能
需求：
- 实现数据筛选功能
- 添加筛选条件UI
- 支持多条件组合筛选
- 确保筛选性能优化

6. 右键菜单功能
需求：
- 实现自主解冻功能
- 添加到路由系统(routes)
- 完善右键菜单交互
- 添加相应的权限控制

7. 导出逻辑优化
需求：
- 分离单个错题导出和批量导出逻辑
- 在主进程中创建独立的处理函数
- 优化导出性能，特别是批量导出
- 添加导出进度反馈
- 改进导出文件的组织结构
- 优化导出错误处理

实现步骤：
- 在 electron/main/index.ts 中分离导出处理函数
- 修改 History.vue 中的导出调用逻辑
- 添加导出进度状态管理
- 实现批量导出的并发控制
- 优化导出文件命名和组织



实现计划与优先级
阶段 1 (v1.1) - 基础功能
前端:
实现熟练度筛选组件
实现基本排序功能
构建网格/列表视图切换
开发错题卡片和详细预览
后端:
创建获取导出错题列表的API
实现错题详情查询
设置基本的文件系统操作
实现读取元数据功能
开发单个错题导出功能
阶段 2 (v1.2) - 选择与状态管理
前端:
添加状态筛选功能
实现标签分类系统
开发选择模式切换
构建批量选择UI
实现已选项目管理
后端:
创建更新元数据API
开发状态标记管理功能
阶段 3 (v1.3) - 二次导出功能
前端:
构建导出设置表单
实现二次导出状态管理
添加导出进度显示
后端:
开发批量错题导出功能
实现自定义文件夹导出
关键数据流
错题筛选流程:
前端发起筛选请求 → IPC通信 → 后端查询文件系统和元数据 → 返回筛选结果 → 前端渲染
二次导出流程:
用户选择错题 → 前端收集错题ID → 发送导出请求 → 后端处理批量导出 → 更新元数据标记 → 返回结果 → 前端更新UI
状态管理流程:
错题状态变更 → 更新元数据API → 后端保存状态 → 前端刷新显示
通过这种模块化的实现方案，您可以:
先实现基础的筛选和展示功能(v1.1)
然后添加批量选择功能(v1.2)
最后完成二次导出和高级功能(v1.3)  raph TD
    subgraph "前端 (Vue)"
        A[错题管理页面] --> B[筛选与排序模块 v1.1]
        A --> C[错题展示模块 v1.1]
        A --> D[批量选择模块 v1.2]
        A --> E[二次导出模块 v1.3]
        
        B --> B1[熟练度筛选 v1.1]
        B --> B2[状态筛选 v1.2]
        B --> B3[排序功能 v1.1]
        
        C --> C1[网格/列表视图 v1.1]
        C --> C2[错题详情预览 v1.1]
        C --> C3[标签分类系统 v1.2]
        
        D --> D1[选择模式切换 v1.2]
        D --> D2[批量选择UI v1.2]
        D --> D3[已选项目管理 v1.2]
        
        E --> E1[导出设置表单 v1.3]
        E --> E2[二次导出状态管理 v1.3]
        E --> E3[导出进度显示 v1.3]
    end
    
    subgraph "后端 (Node/Electron)"
        F[IPC通信层] --> G[错题文件管理]
        F --> H[元数据管理]
        F --> I[导出处理]
        
        G --> G1[获取导出错题 v1.1]
        G --> G2[错题详情查询 v1.1]
        G --> G3[文件系统操作 v1.1]
        
        H --> H1[读取元数据 v1.1]
        H --> H2[更新元数据 v1.2]
        H --> H3[状态标记管理 v1.2]
        
        I --> I1[单个错题导出 v1.1]
        I --> I2[批量错题导出 v1.3]
        I --> I3[自定义文件夹导出 v1.3]
    end
    
    %% 前后端连接
    B1 <-.IPC.-> G1
    B2 <-.IPC.-> H1
    C1 <-.IPC.-> G1
    C2 <-.IPC.-> G2
    D3 <-.IPC.-> G2
    E1 <-.IPC.-> I1
    E2 <-.IPC.-> H2
    E3 <-.IPC.-> I2
    
    %% 数据流
    subgraph "数据流"
        DB[(文件系统)]
        Meta[(元数据存储)]
        DB <--> G
        Meta <--> H
        I --> DB
    end
    
    %% 优先级说明
    classDef v1_1 fill:#d4f4dd,stroke:#333,stroke-width:1px
    classDef v1_2 fill:#ffecb8,stroke:#333,stroke-width:1px
    classDef v1_3 fill:#ffd1dc,stroke:#333,stroke-width:1px
    
    class B1,B3,C1,C2,G1,G2,G3,H1,I1 v1_1
    class B2,C3,D1,D2,D3,H2,H3 v1_2
    class E1,E2,E3,I2,I3 v1_3
